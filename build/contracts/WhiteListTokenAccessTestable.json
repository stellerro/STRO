{
  "contractName": "WhiteListTokenAccessTestable",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isKYCAdmin",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceKYCAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addKYClisted",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceKYClisted",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeKYClisted",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addKYCAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isKYClisted",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "investorAddress",
          "type": "address"
        }
      ],
      "name": "isFreeInvestor",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeKYCAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "KYClistedAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "KYClistedRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "KYCAdminAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "account",
          "type": "address"
        }
      ],
      "name": "KYCAdminRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "test_isKYCAdmin",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "account",
          "type": "address"
        }
      ],
      "name": "test_removeKYCAdmin",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_investorAddress",
          "type": "address"
        }
      ],
      "name": "test_isFreeInvestor",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isKYCAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceKYCAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addKYClisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"test_removeKYCAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceKYClisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeKYClisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"test_isKYCAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addKYCAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isKYClisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_investorAddress\",\"type\":\"address\"}],\"name\":\"test_isFreeInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"investorAddress\",\"type\":\"address\"}],\"name\":\"isFreeInvestor\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeKYCAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KYClistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KYClistedRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KYCAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"KYCAdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"addKYCAdmin(address)\":{\"params\":{\"account\":\"the address to add\"}},\"isFreeInvestor(address)\":{\"params\":{\"investorAddress\":\"the investor address\"}},\"isOwner()\":{\"return\":\"true if `msg.sender` is the owner of the contract.\"},\"owner()\":{\"return\":\"the address of the owner.\"},\"removeKYCAdmin(address)\":{\"params\":{\"account\":\"the address to remove\"}},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"test_isFreeInvestor(address)\":{\"params\":{\"_investorAddress\":\"the investor address\"}},\"test_isKYCAdmin(address)\":{\"params\":{\"account\":\"the address to verify\"}},\"test_removeKYCAdmin(address)\":{\"params\":{\"account\":\"the address to remove\"}},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}}},\"userdoc\":{\"methods\":{\"addKYCAdmin(address)\":{\"notice\":\"Add a kyc admin\"},\"isFreeInvestor(address)\":{\"notice\":\"Check if the investor is KYC approved and also accredited\"},\"removeKYCAdmin(address)\":{\"notice\":\"Remove a kyc admin\"},\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"},\"test_isFreeInvestor(address)\":{\"notice\":\"Check if the investor is KYC approved and also accredited\"},\"test_isKYCAdmin(address)\":{\"notice\":\"Check if address is KYC admin or owner\"},\"test_removeKYCAdmin(address)\":{\"notice\":\"Remove a kyc admin\"}},\"notice\":\"A testable version for RegulationDTokenAccess\"}},\"settings\":{\"compilationTarget\":{\"/C/Users/Noam/BCS/stellero/Dev/StellerroToken/contracts/testables/WhiteListTokenAccessTestable.sol\":\"WhiteListTokenAccessTestable\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/C/Users/Noam/BCS/stellero/Dev/StellerroToken/contracts/KYCAdminRole.sol\":{\"keccak256\":\"0x54df1c508c3a0b5543577ddabc534d8495f36cca859ee5d2af86d95ee4eba0a4\",\"urls\":[\"bzzr://e29ba87224622ba0f71fa2c61cc3e939b5a1e0868726ff0cd9de1b5ad5d51b09\"]},\"/C/Users/Noam/BCS/stellero/Dev/StellerroToken/contracts/KYCListedRole.sol\":{\"keccak256\":\"0xeae32e53faf8fde88f4f3a9b8511ab6637f78163e434174dda1c35abf91870a1\",\"urls\":[\"bzzr://286385385f836232332110887adbc2e5ee3de805bd0302979ef64126c9ea76db\"]},\"/C/Users/Noam/BCS/stellero/Dev/StellerroToken/contracts/WhiteListTokenAccess.sol\":{\"keccak256\":\"0xe9a2cc3b9048b3d4c7c355f24cc8d64d45cd4afbd5d36ac17745dce941349374\",\"urls\":[\"bzzr://59ee6cff242914e223f2868f9c1124880009a67fcab723e9a1219754ad26c501\"]},\"/C/Users/Noam/BCS/stellero/Dev/StellerroToken/contracts/testables/WhiteListTokenAccessTestable.sol\":{\"keccak256\":\"0x36c4e7d3f79039d38e59259595a631a2372e05e2fc8ea51d0e06e1b3099460e5\",\"urls\":[\"bzzr://ebbe682ac6d5460954420a746c1966bfdafa81fd486b1b6b91fa66ea35800a15\"]},\"openzeppelin-solidity/contracts/access/Roles.sol\":{\"keccak256\":\"0x659ba0f9a3392cd50a8a5fafaf5dfd8c6a0878f6a4613bceff4e90dceddcd865\",\"urls\":[\"bzzr://f704341d520fbc98716541f1b3f67737f0ee6e94adf072a66acb2bd25d593c2b\"]},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0x980de387a1a020a498f53d00f89fecebb12c949a17e8f160093c0303ede2b786\",\"urls\":[\"bzzr://08894efa2a557982070beda6a81a032407e70532d24bdafe80d39660c74904d9\"]}},\"version\":1}",
  "bytecode": "0x60806040819052600080546001600160a01b03191633178082556001600160a01b0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36100573361005c60201b60201c565b610132565b6100748160016100ab60201b6106501790919060201c565b6040516001600160a01b038216907f6ef188d34b8fac4126790bd81059831348a92504fa4f99a97c9958a1749c63bc90600090a250565b6001600160a01b0381166100be57600080fd5b6100ce82826100fd60201b60201c565b156100d857600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160a01b03821661011257600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b610710806101416000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063bc7c9e6811610066578063bc7c9e6814610269578063c2282f771461028f578063d92a6cf6146102b5578063f2fde38b146102db57610100565b80638da5cb5b146101f15780638f32d59b146102155780638fd600041461021d578063a2d5027a1461024357610100565b80635b4e3f3d116100d35780635b4e3f3d14610195578063715018a61461019d5780637696f416146101a5578063878131d8146101cb57610100565b806312f25343146101055780631548dbc81461013f5780632c1019221461014957806352bb229b1461016f575b600080fd5b61012b6004803603602081101561011b57600080fd5b50356001600160a01b0316610301565b604080519115158252519081900360200190f35b61014761031a565b005b6101476004803603602081101561015f57600080fd5b50356001600160a01b0316610325565b6101476004803603602081101561018557600080fd5b50356001600160a01b0316610343565b61014761034c565b610147610355565b610147600480360360208110156101bb57600080fd5b50356001600160a01b03166103b0565b61012b600480360360208110156101e157600080fd5b50356001600160a01b03166103cb565b6101f96103d6565b604080516001600160a01b039092168252519081900360200190f35b61012b6103e5565b6101476004803603602081101561023357600080fd5b50356001600160a01b03166103f6565b61012b6004803603602081101561025957600080fd5b50356001600160a01b0316610410565b61012b6004803603602081101561027f57600080fd5b50356001600160a01b0316610423565b61012b600480360360208110156102a557600080fd5b50356001600160a01b031661042a565b610147600480360360208110156102cb57600080fd5b50356001600160a01b0316610435565b610147600480360360208110156102f157600080fd5b50356001600160a01b031661044f565b600061031460018363ffffffff61046916565b92915050565b6103233361049e565b565b61032e33610301565b61033757600080fd5b610340816104e6565b50565b61034081610435565b6103233361052e565b61035d6103e5565b61036657600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6103b933610301565b6103c257600080fd5b6103408161052e565b600061031482610301565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b6103fe6103e5565b61040757600080fd5b61034081610576565b600061031460028363ffffffff61046916565b6000610314825b600061031482610410565b61043d6103e5565b61044657600080fd5b61034081610591565b6104576103e5565b61046057600080fd5b6103408161059a565b60006001600160a01b03821661047e57600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b6104af60018263ffffffff61060816565b6040516001600160a01b038216907fe989c3ea74e8447b86355ca10e7b910a5ea9931330517c33e3002727f5e95ee890600090a250565b6104f760028263ffffffff61065016565b6040516001600160a01b038216907f5a85c934d044d4af54e45ef3efa70919b2301fe806a7b570e09d7e0f90a4445a90600090a250565b61053f60028263ffffffff61060816565b6040516001600160a01b038216907fbc6a411073357cff5bee0c71e7722c8fd47b5a40591adcedeaac84bd10c0736890600090a250565b61057f33610301565b61058857600080fd5b6103408161069c565b6103408161049e565b6001600160a01b0381166105ad57600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03811661061b57600080fd5b6106258282610469565b61062e57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6001600160a01b03811661066357600080fd5b61066d8282610469565b1561067757600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6106ad60018263ffffffff61065016565b6040516001600160a01b038216907f6ef188d34b8fac4126790bd81059831348a92504fa4f99a97c9958a1749c63bc90600090a25056fea165627a7a72305820f1b97493f37a3243ff56dc217fe010acbba13d39f84b80ca8b43ba25d504fa7c0029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063bc7c9e6811610066578063bc7c9e6814610269578063c2282f771461028f578063d92a6cf6146102b5578063f2fde38b146102db57610100565b80638da5cb5b146101f15780638f32d59b146102155780638fd600041461021d578063a2d5027a1461024357610100565b80635b4e3f3d116100d35780635b4e3f3d14610195578063715018a61461019d5780637696f416146101a5578063878131d8146101cb57610100565b806312f25343146101055780631548dbc81461013f5780632c1019221461014957806352bb229b1461016f575b600080fd5b61012b6004803603602081101561011b57600080fd5b50356001600160a01b0316610301565b604080519115158252519081900360200190f35b61014761031a565b005b6101476004803603602081101561015f57600080fd5b50356001600160a01b0316610325565b6101476004803603602081101561018557600080fd5b50356001600160a01b0316610343565b61014761034c565b610147610355565b610147600480360360208110156101bb57600080fd5b50356001600160a01b03166103b0565b61012b600480360360208110156101e157600080fd5b50356001600160a01b03166103cb565b6101f96103d6565b604080516001600160a01b039092168252519081900360200190f35b61012b6103e5565b6101476004803603602081101561023357600080fd5b50356001600160a01b03166103f6565b61012b6004803603602081101561025957600080fd5b50356001600160a01b0316610410565b61012b6004803603602081101561027f57600080fd5b50356001600160a01b0316610423565b61012b600480360360208110156102a557600080fd5b50356001600160a01b031661042a565b610147600480360360208110156102cb57600080fd5b50356001600160a01b0316610435565b610147600480360360208110156102f157600080fd5b50356001600160a01b031661044f565b600061031460018363ffffffff61046916565b92915050565b6103233361049e565b565b61032e33610301565b61033757600080fd5b610340816104e6565b50565b61034081610435565b6103233361052e565b61035d6103e5565b61036657600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6103b933610301565b6103c257600080fd5b6103408161052e565b600061031482610301565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b6103fe6103e5565b61040757600080fd5b61034081610576565b600061031460028363ffffffff61046916565b6000610314825b600061031482610410565b61043d6103e5565b61044657600080fd5b61034081610591565b6104576103e5565b61046057600080fd5b6103408161059a565b60006001600160a01b03821661047e57600080fd5b506001600160a01b03166000908152602091909152604090205460ff1690565b6104af60018263ffffffff61060816565b6040516001600160a01b038216907fe989c3ea74e8447b86355ca10e7b910a5ea9931330517c33e3002727f5e95ee890600090a250565b6104f760028263ffffffff61065016565b6040516001600160a01b038216907f5a85c934d044d4af54e45ef3efa70919b2301fe806a7b570e09d7e0f90a4445a90600090a250565b61053f60028263ffffffff61060816565b6040516001600160a01b038216907fbc6a411073357cff5bee0c71e7722c8fd47b5a40591adcedeaac84bd10c0736890600090a250565b61057f33610301565b61058857600080fd5b6103408161069c565b6103408161049e565b6001600160a01b0381166105ad57600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03811661061b57600080fd5b6106258282610469565b61062e57600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6001600160a01b03811661066357600080fd5b61066d8282610469565b1561067757600080fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6106ad60018263ffffffff61065016565b6040516001600160a01b038216907f6ef188d34b8fac4126790bd81059831348a92504fa4f99a97c9958a1749c63bc90600090a25056fea165627a7a72305820f1b97493f37a3243ff56dc217fe010acbba13d39f84b80ca8b43ba25d504fa7c0029",
  "sourceMap": "121:725:6:-;;;;;515:6:11;:19;;-1:-1:-1;;;;;;515:19:11;524:10;515:19;;;;-1:-1:-1;;;;;582:6:11;;549:40;;515:6;;549:40;448:24:0;461:10;448:12;;;:24;;:::i;:::-;121:725:6;;997:128:0;1056:23;1071:7;1056:10;:14;;;;;;:23;;;;:::i;:::-;1095:22;;-1:-1:-1;;;;;1095:22:0;;;;;;;;997:128;:::o;259:181:8:-;-1:-1:-1;;;;;335:21:8;;327:30;;;;;;376:18;380:4;386:7;376:3;;;:18;;:::i;:::-;375:19;367:28;;;;;;-1:-1:-1;;;;;406:20:8;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;406:27:8;429:4;406:27;;;259:181::o;786:162::-;858:4;-1:-1:-1;;;;;882:21:8;;874:30;;;;;;-1:-1:-1;;;;;;921:20:8;:11;:20;;;;;;;;;;;;;;;786:162::o;121:725:6:-;;;;;;;",
  "deployedSourceMap": "121:725:6:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;121:725:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;582:113:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;582:113:0;-1:-1:-1;;;;;582:113:0;;:::i;:::-;;;;;;;;;;;;;;;;;;809:81;;;:::i;:::-;;800:100:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;800:100:1;-1:-1:-1;;;;;800:100:1;;:::i;481:95:6:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;481:95:6;-1:-1:-1;;;;;481:95:6;;:::i;1022:83:1:-;;;:::i;1347:137:11:-;;;:::i;908:106:1:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;908:106:1;-1:-1:-1;;;;;908:106:1;;:::i;285:114:6:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;285:114:6;-1:-1:-1;;;;;285:114:6;;:::i;659:77:11:-;;;:::i;:::-;;;;-1:-1:-1;;;;;659:77:11;;;;;;;;;;;;;;979:90;;;:::i;308:93:5:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;308:93:5;-1:-1:-1;;;;;308:93:5;;:::i;677:115:1:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;677:115:1;-1:-1:-1;;;;;677:115:1;;:::i;705:138:6:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;705:138:6;-1:-1:-1;;;;;705:138:6;;:::i;710:214:5:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;710:214:5;-1:-1:-1;;;;;710:214:5;;:::i;483:99::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;483:99:5;-1:-1:-1;;;;;483:99:5;;:::i;1655:107:11:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1655:107:11;-1:-1:-1;;;;;1655:107:11;;:::i;582:113:0:-;640:4;664:23;:10;679:7;664:23;:14;:23;:::i;:::-;657:30;582:113;-1:-1:-1;;582:113:0:o;809:81::-;855:27;871:10;855:15;:27::i;:::-;809:81::o;800:100:1:-;531:22:0;542:10;531;:22::i;:::-;523:31;;;;;;870:22:1;884:7;870:13;:22::i;:::-;800:100;:::o;481:95:6:-;542:29;563:7;542:20;:29::i;1022:83:1:-;1069:28;1086:10;1069:16;:28::i;1347:137:11:-;863:9;:7;:9::i;:::-;855:18;;;;;;1445:1;1429:6;;1408:40;;-1:-1:-1;;;;;1429:6:11;;;;1408:40;;1445:1;;1408:40;1475:1;1458:19;;-1:-1:-1;;;;;;1458:19:11;;;1347:137::o;908:106:1:-;531:22:0;542:10;531;:22::i;:::-;523:31;;;;;;981:25:1;998:7;981:16;:25::i;285:114:6:-;348:4;369:25;386:7;369:16;:25::i;659:77:11:-;697:7;723:6;-1:-1:-1;;;;;723:6:11;659:77;:::o;979:90::-;1019:4;1056:6;-1:-1:-1;;;;;1056:6:11;1042:10;:20;;979:90::o;308:93:5:-;863:9:11;:7;:9::i;:::-;855:18;;;;;;370:26:5;388:7;370:17;:26::i;677:115:1:-;736:4;760:24;:11;776:7;760:24;:15;:24;:::i;705:138:6:-;781:4;800:38;821:16;710:214:5;780:4;799:28;811:15;799:11;:28::i;483:99::-;863:9:11;:7;:9::i;:::-;855:18;;;;;;548:29:5;569:7;548:20;:29::i;1655:107:11:-;863:9;:7;:9::i;:::-;855:18;;;;;;1727:28;1746:8;1727:18;:28::i;786:162:8:-;858:4;-1:-1:-1;;;;;882:21:8;;874:30;;;;;;-1:-1:-1;;;;;;921:20:8;:11;:20;;;;;;;;;;;;;;;786:162::o;1133:136:0:-;1195:26;:10;1213:7;1195:26;:17;:26;:::i;:::-;1237:24;;-1:-1:-1;;;;;1237:24:0;;;;;;;;1133:136;:::o;1113:131:1:-;1173:24;:11;1189:7;1173:24;:15;:24;:::i;:::-;1213:23;;-1:-1:-1;;;;;1213:23:1;;;;;;;;1113:131;:::o;1252:139::-;1315:27;:11;1334:7;1315:27;:18;:27;:::i;:::-;1358:25;;-1:-1:-1;;;;;1358:25:1;;;;;;;;1252:139;:::o;703:98:0:-;531:22;542:10;531;:22::i;:::-;523:31;;;;;;772:21;785:7;772:12;:21::i;898:91::-;957:24;973:7;957:15;:24::i;1906:183:11:-;-1:-1:-1;;;;;1979:22:11;;1971:31;;;;;;2038:6;;;2017:38;;-1:-1:-1;;;;;2017:38:11;;;;2038:6;;;2017:38;;;2065:6;:17;;-1:-1:-1;;;;;;2065:17:11;-1:-1:-1;;;;;2065:17:11;;;;;;;;;;1906:183::o;514:184:8:-;-1:-1:-1;;;;;593:21:8;;585:30;;;;;;633:18;637:4;643:7;633:3;:18::i;:::-;625:27;;;;;;-1:-1:-1;;;;;663:20:8;686:5;663:20;;;;;;;;;;;:28;;-1:-1:-1;;663:28:8;;;514:184::o;259:181::-;-1:-1:-1;;;;;335:21:8;;327:30;;;;;;376:18;380:4;386:7;376:3;:18::i;:::-;375:19;367:28;;;;;;-1:-1:-1;;;;;406:20:8;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;406:27:8;429:4;406:27;;;259:181::o;997:128:0:-;1056:23;:10;1071:7;1056:23;:14;:23;:::i;:::-;1095:22;;-1:-1:-1;;;;;1095:22:0;;;;;;;;997:128;:::o",
  "source": "pragma solidity ^0.5.7;\n\nimport \"../WhiteListTokenAccess.sol\";\n\n/**\n * A testable version for RegulationDTokenAccess\n */\ncontract WhiteListTokenAccessTestable is WhiteListTokenAccess{\n\n  /**\n   * Check if address is KYC admin or owner\n   * @param account the address to verify\n   */\n  function test_isKYCAdmin(address account) public view returns (bool) {\n      return super.isKYCAdmin(account);\n  }\n\n  /**\n   * Remove a kyc admin\n   * @param account the address to remove\n   */\n  function test_removeKYCAdmin(address account) public {\n      super.removeKYCAdmin(account);\n  }\n\n  /**\n   * Check if the investor is KYC approved and also accredited\n   * @param _investorAddress the investor address\n   */\n  function test_isFreeInvestor(address _investorAddress) public view returns (bool) {\n    return super.isFreeInvestor(_investorAddress);\n  }\n\n}\n",
  "sourcePath": "C:/Users/Noam/BCS/stellero/Dev/StellerroToken/contracts/testables/WhiteListTokenAccessTestable.sol",
  "ast": {
    "absolutePath": "/C/Users/Noam/BCS/stellero/Dev/StellerroToken/contracts/testables/WhiteListTokenAccessTestable.sol",
    "exportedSymbols": {
      "WhiteListTokenAccessTestable": [
        695
      ]
    },
    "id": 696,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 653,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".7"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:6"
      },
      {
        "absolutePath": "/C/Users/Noam/BCS/stellero/Dev/StellerroToken/contracts/WhiteListTokenAccess.sol",
        "file": "../WhiteListTokenAccess.sol",
        "id": 654,
        "nodeType": "ImportDirective",
        "scope": 696,
        "sourceUnit": 652,
        "src": "25:37:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 655,
              "name": "WhiteListTokenAccess",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 651,
              "src": "162:20:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_WhiteListTokenAccess_$651",
                "typeString": "contract WhiteListTokenAccess"
              }
            },
            "id": 656,
            "nodeType": "InheritanceSpecifier",
            "src": "162:20:6"
          }
        ],
        "contractDependencies": [
          112,
          221,
          651,
          1170
        ],
        "contractKind": "contract",
        "documentation": "A testable version for RegulationDTokenAccess",
        "fullyImplemented": true,
        "id": 695,
        "linearizedBaseContracts": [
          695,
          651,
          221,
          112,
          1170
        ],
        "name": "WhiteListTokenAccessTestable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 668,
              "nodeType": "Block",
              "src": "354:45:6",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 665,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 658,
                        "src": "386:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 663,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1907,
                        "src": "369:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_WhiteListTokenAccessTestable_$695",
                          "typeString": "contract super WhiteListTokenAccessTestable"
                        }
                      },
                      "id": 664,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "isKYCAdmin",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 48,
                      "src": "369:16:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                        "typeString": "function (address) view returns (bool)"
                      }
                    },
                    "id": 666,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "369:25:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 662,
                  "id": 667,
                  "nodeType": "Return",
                  "src": "362:32:6"
                }
              ]
            },
            "documentation": "Check if address is KYC admin or owner\n@param account the address to verify",
            "id": 669,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "test_isKYCAdmin",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 659,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 658,
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 669,
                  "src": "310:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 657,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "310:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "309:17:6"
            },
            "returnParameters": {
              "id": 662,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 661,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 669,
                  "src": "348:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 660,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "348:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "347:6:6"
            },
            "scope": 695,
            "src": "285:114:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 680,
              "nodeType": "Block",
              "src": "534:42:6",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 677,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 671,
                        "src": "563:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 674,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1907,
                        "src": "542:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_WhiteListTokenAccessTestable_$695",
                          "typeString": "contract super WhiteListTokenAccessTestable"
                        }
                      },
                      "id": 676,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "removeKYCAdmin",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 638,
                      "src": "542:20:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 678,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "542:29:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 679,
                  "nodeType": "ExpressionStatement",
                  "src": "542:29:6"
                }
              ]
            },
            "documentation": "Remove a kyc admin\n@param account the address to remove",
            "id": 681,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "test_removeKYCAdmin",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 672,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 671,
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 681,
                  "src": "510:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 670,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "510:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "509:17:6"
            },
            "returnParameters": {
              "id": 673,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "534:0:6"
            },
            "scope": 695,
            "src": "481:95:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 693,
              "nodeType": "Block",
              "src": "787:56:6",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 690,
                        "name": "_investorAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 683,
                        "src": "821:16:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 688,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1907,
                        "src": "800:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_WhiteListTokenAccessTestable_$695",
                          "typeString": "contract super WhiteListTokenAccessTestable"
                        }
                      },
                      "id": 689,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "isFreeInvestor",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 650,
                      "src": "800:20:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                        "typeString": "function (address) view returns (bool)"
                      }
                    },
                    "id": 691,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "800:38:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 687,
                  "id": 692,
                  "nodeType": "Return",
                  "src": "793:45:6"
                }
              ]
            },
            "documentation": "Check if the investor is KYC approved and also accredited\n@param _investorAddress the investor address",
            "id": 694,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "test_isFreeInvestor",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 684,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 683,
                  "name": "_investorAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 694,
                  "src": "734:24:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 682,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "734:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "733:26:6"
            },
            "returnParameters": {
              "id": 687,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 686,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 694,
                  "src": "781:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 685,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "781:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "780:6:6"
            },
            "scope": 695,
            "src": "705:138:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 696,
        "src": "121:725:6"
      }
    ],
    "src": "0:847:6"
  },
  "legacyAST": {
    "absolutePath": "/C/Users/Noam/BCS/stellero/Dev/StellerroToken/contracts/testables/WhiteListTokenAccessTestable.sol",
    "exportedSymbols": {
      "WhiteListTokenAccessTestable": [
        695
      ]
    },
    "id": 696,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 653,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".7"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:6"
      },
      {
        "absolutePath": "/C/Users/Noam/BCS/stellero/Dev/StellerroToken/contracts/WhiteListTokenAccess.sol",
        "file": "../WhiteListTokenAccess.sol",
        "id": 654,
        "nodeType": "ImportDirective",
        "scope": 696,
        "sourceUnit": 652,
        "src": "25:37:6",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 655,
              "name": "WhiteListTokenAccess",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 651,
              "src": "162:20:6",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_WhiteListTokenAccess_$651",
                "typeString": "contract WhiteListTokenAccess"
              }
            },
            "id": 656,
            "nodeType": "InheritanceSpecifier",
            "src": "162:20:6"
          }
        ],
        "contractDependencies": [
          112,
          221,
          651,
          1170
        ],
        "contractKind": "contract",
        "documentation": "A testable version for RegulationDTokenAccess",
        "fullyImplemented": true,
        "id": 695,
        "linearizedBaseContracts": [
          695,
          651,
          221,
          112,
          1170
        ],
        "name": "WhiteListTokenAccessTestable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 668,
              "nodeType": "Block",
              "src": "354:45:6",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 665,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 658,
                        "src": "386:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 663,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1907,
                        "src": "369:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_WhiteListTokenAccessTestable_$695",
                          "typeString": "contract super WhiteListTokenAccessTestable"
                        }
                      },
                      "id": 664,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "isKYCAdmin",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 48,
                      "src": "369:16:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                        "typeString": "function (address) view returns (bool)"
                      }
                    },
                    "id": 666,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "369:25:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 662,
                  "id": 667,
                  "nodeType": "Return",
                  "src": "362:32:6"
                }
              ]
            },
            "documentation": "Check if address is KYC admin or owner\n@param account the address to verify",
            "id": 669,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "test_isKYCAdmin",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 659,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 658,
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 669,
                  "src": "310:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 657,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "310:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "309:17:6"
            },
            "returnParameters": {
              "id": 662,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 661,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 669,
                  "src": "348:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 660,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "348:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "347:6:6"
            },
            "scope": 695,
            "src": "285:114:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 680,
              "nodeType": "Block",
              "src": "534:42:6",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 677,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 671,
                        "src": "563:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 674,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1907,
                        "src": "542:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_WhiteListTokenAccessTestable_$695",
                          "typeString": "contract super WhiteListTokenAccessTestable"
                        }
                      },
                      "id": 676,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "removeKYCAdmin",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 638,
                      "src": "542:20:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 678,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "542:29:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 679,
                  "nodeType": "ExpressionStatement",
                  "src": "542:29:6"
                }
              ]
            },
            "documentation": "Remove a kyc admin\n@param account the address to remove",
            "id": 681,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "test_removeKYCAdmin",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 672,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 671,
                  "name": "account",
                  "nodeType": "VariableDeclaration",
                  "scope": 681,
                  "src": "510:15:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 670,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "510:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "509:17:6"
            },
            "returnParameters": {
              "id": 673,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "534:0:6"
            },
            "scope": 695,
            "src": "481:95:6",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 693,
              "nodeType": "Block",
              "src": "787:56:6",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 690,
                        "name": "_investorAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 683,
                        "src": "821:16:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 688,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1907,
                        "src": "800:5:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_WhiteListTokenAccessTestable_$695",
                          "typeString": "contract super WhiteListTokenAccessTestable"
                        }
                      },
                      "id": 689,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "isFreeInvestor",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 650,
                      "src": "800:20:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                        "typeString": "function (address) view returns (bool)"
                      }
                    },
                    "id": 691,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "800:38:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 687,
                  "id": 692,
                  "nodeType": "Return",
                  "src": "793:45:6"
                }
              ]
            },
            "documentation": "Check if the investor is KYC approved and also accredited\n@param _investorAddress the investor address",
            "id": 694,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "test_isFreeInvestor",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 684,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 683,
                  "name": "_investorAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 694,
                  "src": "734:24:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 682,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "734:7:6",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "733:26:6"
            },
            "returnParameters": {
              "id": 687,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 686,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 694,
                  "src": "781:4:6",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 685,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "781:4:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "780:6:6"
            },
            "scope": 695,
            "src": "705:138:6",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 696,
        "src": "121:725:6"
      }
    ],
    "src": "0:847:6"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-06-29T19:45:46.124Z",
  "devdoc": {
    "methods": {
      "addKYCAdmin(address)": {
        "params": {
          "account": "the address to add"
        }
      },
      "isFreeInvestor(address)": {
        "params": {
          "investorAddress": "the investor address"
        }
      },
      "isOwner()": {
        "return": "true if `msg.sender` is the owner of the contract."
      },
      "owner()": {
        "return": "the address of the owner."
      },
      "removeKYCAdmin(address)": {
        "params": {
          "account": "the address to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "test_isFreeInvestor(address)": {
        "params": {
          "_investorAddress": "the investor address"
        }
      },
      "test_isKYCAdmin(address)": {
        "params": {
          "account": "the address to verify"
        }
      },
      "test_removeKYCAdmin(address)": {
        "params": {
          "account": "the address to remove"
        }
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "addKYCAdmin(address)": {
        "notice": "Add a kyc admin"
      },
      "isFreeInvestor(address)": {
        "notice": "Check if the investor is KYC approved and also accredited"
      },
      "removeKYCAdmin(address)": {
        "notice": "Remove a kyc admin"
      },
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      },
      "test_isFreeInvestor(address)": {
        "notice": "Check if the investor is KYC approved and also accredited"
      },
      "test_isKYCAdmin(address)": {
        "notice": "Check if address is KYC admin or owner"
      },
      "test_removeKYCAdmin(address)": {
        "notice": "Remove a kyc admin"
      }
    },
    "notice": "A testable version for RegulationDTokenAccess"
  }
}